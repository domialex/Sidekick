@using Sidekick.Domain.Game.Languages

@if (Visible)
{
    <div class="mb-2">
        <MudText Typo="Typo.h5" Class="px-2">@Resources.Class</MudText>
        <MudCheckBox T="bool" Checked="Enabled" Color="Color.Primary" Label="@ClassLabel" Class="font-smallcaps" CheckedChanged="CheckedChanged" />
    </div>

}

@code {
    [Inject] private IGameLanguageProvider GameLanguageProvider { get; set; }
    [Inject] private TradeResources Resources { get; set; }

    [Parameter] public Item Item { get; set; }
    [Parameter] public Class? Value { get; set; }
    [Parameter] public EventCallback<Class?> ValueChanged { get; set; }

    private bool Visible => (Item?.Metadata.Rarity == Rarity.Rare || Item?.Metadata.Rarity == Rarity.Magic || Item?.Metadata.Rarity == Rarity.Normal) && Item.Metadata.Class != Class.Undefined && !string.IsNullOrEmpty(ClassLabel);

    private bool Enabled => Value.HasValue;
    private string ClassLabel { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (Item == null)
        {
            return;
        }

        var property = GameLanguageProvider.Language.Classes.GetType().GetProperties().FirstOrDefault(x => x.Name == Item.Metadata.Class.ToString());
        ClassLabel = property.GetValue(GameLanguageProvider.Language.Classes).ToString();
    }

    private void CheckedChanged(bool value)
    {
        if (value)
        {
            ValueChanged.InvokeAsync(Item.Metadata.Class);
        }
        else
        {
            ValueChanged.InvokeAsync(null);
        }
    }
}
