
@if (Visible)
{
    // Root <div> element is required for ::deep CSS styles to be applied.
    <div>
        <MudPaper Class="mb-2">
            @if (!Expanded)
            {
                <MudButton Variant="Variant.Text" Color="Color.Info" FullWidth="true" Class="d-flex flex-row justify-center align-center" OnClick="Expand">
                    <MudIcon Color="Color.Info" Icon="@Icons.Material.Filled.ArrowDropDown" />
                    <MudText Color="Color.Info" Class="font-smallcaps">@Resources.Filters_Expand</MudText>
                    <MudIcon Color="Color.Info" Icon="@Icons.Material.Filled.ArrowDropDown" />
                </MudButton>
            }
            else
            {
                <MudButton Variant="Variant.Text" Color="Color.Info" FullWidth="true" Class="d-flex flex-row justify-center align-center mb-2" OnClick="Collapse">
                    <MudIcon Color="Color.Info" Icon="@Icons.Material.Filled.ArrowDropUp" />
                    <MudText Color="Color.Info" Class="font-smallcaps">@Resources.Filters_Collapse</MudText>
                    <MudIcon Color="Color.Info" Icon="@Icons.Material.Filled.ArrowDropUp" />
                </MudButton>

                <MudGrid Spacing="2">
                    <MudItem xs="12" sm="6">
                        <ClassFilter @bind-Value="PropertyFilters.Class" Item="Item" />
                        <PropertyFiltersComponent Filters="PropertyFilters.Armour" Title="@Resources.Filters_Armour" />
                        <PropertyFiltersComponent Filters="PropertyFilters.Weapon" Title="@Resources.Filters_Weapon" />
                        <PropertyFiltersComponent Filters="PropertyFilters.Map" Title="@Resources.Filters_Map" />
                        <PropertyFiltersComponent Filters="PropertyFilters.Misc" Title="@Resources.Filters_Misc" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        @if (ModifierVisible)
                        {
                            <div class="mb-2">
                                <MudText Typo="Typo.h5" Class="px-2">@Resources.Filters_Modifiers</MudText>
                                <ModifierFiltersComponent Filters="ModifierFilters.Enchant" />
                                <ModifierFiltersComponent Filters="ModifierFilters.Implicit" />
                                <ModifierFiltersComponent Filters="ModifierFilters.Explicit" />
                                <ModifierFiltersComponent Filters="ModifierFilters.Crafted" />
                                <ModifierFiltersComponent Filters="ModifierFilters.Fractured" />
                            </div>
                        }

                        @if (PseudoVisible)
                        {
                            <div class="mb-2">
                                <MudText Typo="Typo.h5" Class="px-2">@Resources.Filters_Pseudo</MudText>
                                <ModifierFiltersComponent Filters="ModifierFilters.Pseudo" />
                            </div>
                        }
                    </MudItem>
                </MudGrid>

                <div class="d-flex justify-end pa-2">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Search">@Resources.Filters_Submit</MudButton>
                </div>
            }
        </MudPaper>
    </div>
}

@code {
    [Inject] public TradeResources Resources { get; set; }

    [Parameter] public Item Item { get; set; }
    [Parameter] public PropertyFilters PropertyFilters { get; set; }
    [Parameter] public ModifierFilters ModifierFilters { get; set; }
    [Parameter] public EventCallback OnSearch { get; set; }

    private bool Expanded { get; set; } = false;
    private bool Visible { get; set; }
    private bool ModifierVisible { get; set; }
    private bool PseudoVisible { get; set; }
    private bool IsInit { get; set; } = false;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (IsInit) return;
        IsInit = Item != null;

        int propertyCount = 0;
        propertyCount += PropertyFilters?.Armour?.Count ?? 0;
        propertyCount += PropertyFilters?.Map?.Count ?? 0;
        propertyCount += PropertyFilters?.Misc?.Count ?? 0;
        propertyCount += PropertyFilters?.Weapon?.Count ?? 0;

        int modifierCount = 0;
        modifierCount += ModifierFilters?.Crafted?.Count ?? 0;
        modifierCount += ModifierFilters?.Enchant?.Count ?? 0;
        modifierCount += ModifierFilters?.Explicit?.Count ?? 0;
        modifierCount += ModifierFilters?.Fractured?.Count ?? 0;
        modifierCount += ModifierFilters?.Implicit?.Count ?? 0;
        ModifierVisible = modifierCount > 0;
        PseudoVisible = ModifierFilters?.Pseudo?.Count > 0;

        Visible = propertyCount > 0 || ModifierVisible || PseudoVisible;
        Expanded = Item?.Metadata.Rarity == Rarity.Rare || Item?.Metadata.Rarity == Rarity.Magic;
    }

    private void Expand()
    {
        Expanded = true;
    }

    private void Collapse()
    {
        Expanded = false;
    }

    private Task Search()
    {
        Expanded = false;
        return OnSearch.InvokeAsync();
    }
}
